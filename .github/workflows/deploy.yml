name: Build, Push to ECR, Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  IMAGE_TAG: ${{ github.sha }}
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  # App settings placeholder variables → map to GitHub Secrets of the same name
  DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}
  JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
  ADMIN_VERIFICATION_KEY: ${{ secrets.ADMIN_VERIFICATION_KEY }}
  RABBITMQ_HOST: ${{ secrets.RABBITMQ_HOST }}
  RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
  RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment:
      name: Production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Replace placeholders in appsettings files with secrets
        run: |
          python3 << 'PYTHON_SCRIPT'
          import os
          import re
          import json
          
          files = [
              "src/IPSDataAcquisition.Presentation/appsettings.json",
              "src/IPSDataAcquisition.Presentation/appsettings.Production.json"
          ]
          
          # Environment variables mapping
          replacements = {
              "__DB_CONNECTION_STRING__": os.environ.get("DB_CONNECTION_STRING", ""),
              "__JWT_SECRET_KEY__": os.environ.get("JWT_SECRET_KEY", ""),
              "__ADMIN_VERIFICATION_KEY__": os.environ.get("ADMIN_VERIFICATION_KEY", ""),
              "__RABBITMQ_HOST__": os.environ.get("RABBITMQ_HOST", ""),
              "__RABBITMQ_USER__": os.environ.get("RABBITMQ_USER", ""),
              "__RABBITMQ_PASSWORD__": os.environ.get("RABBITMQ_PASSWORD", "")
          }
          
          for filepath in files:
              if not os.path.exists(filepath):
                  continue
              
              print(f"Processing {filepath}")
              
              with open(filepath, 'r') as f:
                  content = f.read()
              
              # Replace each placeholder
              for placeholder, value in replacements.items():
                  if not value:
                      print(f"Warning: No value for {placeholder}, leaving as-is")
                      continue
                  
                  # Simple string replacement (much safer than sed with special chars)
                  content = content.replace(f'"{placeholder}"', f'"{value}"')
              
              # Write back
              with open(filepath, 'w') as f:
                  f.write(content)
              
              print(f"✓ Updated {filepath}")
          
          # Preview the production file
          print("\n=== Preview of appsettings.Production.json ===")
          with open("src/IPSDataAcquisition.Presentation/appsettings.Production.json", 'r') as f:
              lines = f.readlines()[:50]  # First 50 lines
              for i, line in enumerate(lines, 1):
                  # Mask sensitive values in preview
                  masked = re.sub(r'("(?:Password|Key|ConnectionString)"\s*:\s*")([^"]+)(")', r'\1***MASKED***\3', line)
                  print(f"{i:3d}: {masked}", end='')
          
          PYTHON_SCRIPT
        shell: bash

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image
        run: |
          IMAGE_URI=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          docker build -t ${IMAGE_URI} .
          docker push ${IMAGE_URI}
        shell: bash

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment:
      name: Production

    steps:
      - name: Checkout (for compose files)
        uses: actions/checkout@v4

      - name: Prepare docker-compose.prod.yml with runtime values
        env:
          APP_PORT_EXTERNAL: 90
        run: |
          set -euo pipefail
          compose="docker-compose.prod.yml"
          sed -i.bak -e "s#__IMAGE_URI__#${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}#g" "$compose"
          ext=${APP_PORT_EXTERNAL:-90}
          sed -i.bak -e "s#__APP_PORT_EXTERNAL__#${ext}#g" "$compose"
          echo "Prepared compose file:" && cat "$compose"
        shell: bash

      - name: Upload compose to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.prod.yml"
          target: "~/ips-data-acquisition-api/"

      - name: Deploy on EC2 via SSH (docker compose)
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: AWS_ACCOUNT_ID,AWS_REGION,ECR_REPOSITORY,IMAGE_TAG
          script: |
            set -euo pipefail
            ECR_REGISTRY=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
            IMAGE_URI=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
            echo "Logging into ECR on EC2..."
            aws ecr get-login-password --region ${AWS_REGION} | sudo docker login --username AWS --password-stdin ${ECR_REGISTRY}

            echo "Pulling and starting via docker compose..."
            
            mkdir -p ~/ips-data-acquisition-api
            cd ~/ips-data-acquisition-api
            sudo docker-compose -f docker-compose.prod.yml pull || true
            sudo docker-compose -f docker-compose.prod.yml up -d

            echo "Deployment finished for ${IMAGE_URI}"
        
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}


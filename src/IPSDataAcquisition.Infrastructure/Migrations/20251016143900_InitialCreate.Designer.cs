// <auto-generated />
using System;
using IPSDataAcquisition.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IPSDataAcquisition.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251016143900_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IPSDataAcquisition.Domain.Entities.Bonus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("SessionsCompleted")
                        .HasColumnType("integer")
                        .HasColumnName("sessions_completed");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_bonuses");

                    b.HasIndex("Date")
                        .HasDatabaseName("ix_bonuses_date");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_bonuses_user_id");

                    b.HasIndex("UserId", "Date")
                        .IsUnique()
                        .HasDatabaseName("ix_bonuses_user_id_date");

                    b.ToTable("bonuses", (string)null);
                });

            modelBuilder.Entity("IPSDataAcquisition.Domain.Entities.ButtonPress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("action");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synced");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("session_id");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_button_presses");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_button_presses_session_id");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("ix_button_presses_timestamp");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_button_presses_user_id");

                    b.ToTable("button_presses", (string)null);
                });

            modelBuilder.Entity("IPSDataAcquisition.Domain.Entities.IMUData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float?>("AccelBiasX")
                        .HasColumnType("real")
                        .HasColumnName("accel_bias_x");

                    b.Property<float?>("AccelBiasY")
                        .HasColumnType("real")
                        .HasColumnName("accel_bias_y");

                    b.Property<float?>("AccelBiasZ")
                        .HasColumnType("real")
                        .HasColumnName("accel_bias_z");

                    b.Property<float?>("AccelUncalX")
                        .HasColumnType("real")
                        .HasColumnName("accel_uncal_x");

                    b.Property<float?>("AccelUncalY")
                        .HasColumnType("real")
                        .HasColumnName("accel_uncal_y");

                    b.Property<float?>("AccelUncalZ")
                        .HasColumnType("real")
                        .HasColumnName("accel_uncal_z");

                    b.Property<float?>("AccelX")
                        .HasColumnType("real")
                        .HasColumnName("accel_x");

                    b.Property<float?>("AccelY")
                        .HasColumnType("real")
                        .HasColumnName("accel_y");

                    b.Property<float?>("AccelZ")
                        .HasColumnType("real")
                        .HasColumnName("accel_z");

                    b.Property<double?>("Altitude")
                        .HasColumnType("double precision")
                        .HasColumnName("altitude");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<float?>("GameRotationW")
                        .HasColumnType("real")
                        .HasColumnName("game_rotation_w");

                    b.Property<float?>("GameRotationX")
                        .HasColumnType("real")
                        .HasColumnName("game_rotation_x");

                    b.Property<float?>("GameRotationY")
                        .HasColumnType("real")
                        .HasColumnName("game_rotation_y");

                    b.Property<float?>("GameRotationZ")
                        .HasColumnType("real")
                        .HasColumnName("game_rotation_z");

                    b.Property<float?>("GeomagRotationW")
                        .HasColumnType("real")
                        .HasColumnName("geomag_rotation_w");

                    b.Property<float?>("GeomagRotationX")
                        .HasColumnType("real")
                        .HasColumnName("geomag_rotation_x");

                    b.Property<float?>("GeomagRotationY")
                        .HasColumnType("real")
                        .HasColumnName("geomag_rotation_y");

                    b.Property<float?>("GeomagRotationZ")
                        .HasColumnType("real")
                        .HasColumnName("geomag_rotation_z");

                    b.Property<float?>("GpsAccuracy")
                        .HasColumnType("real")
                        .HasColumnName("gps_accuracy");

                    b.Property<float?>("GravityX")
                        .HasColumnType("real")
                        .HasColumnName("gravity_x");

                    b.Property<float?>("GravityY")
                        .HasColumnType("real")
                        .HasColumnName("gravity_y");

                    b.Property<float?>("GravityZ")
                        .HasColumnType("real")
                        .HasColumnName("gravity_z");

                    b.Property<float?>("GyroDriftX")
                        .HasColumnType("real")
                        .HasColumnName("gyro_drift_x");

                    b.Property<float?>("GyroDriftY")
                        .HasColumnType("real")
                        .HasColumnName("gyro_drift_y");

                    b.Property<float?>("GyroDriftZ")
                        .HasColumnType("real")
                        .HasColumnName("gyro_drift_z");

                    b.Property<float?>("GyroUncalX")
                        .HasColumnType("real")
                        .HasColumnName("gyro_uncal_x");

                    b.Property<float?>("GyroUncalY")
                        .HasColumnType("real")
                        .HasColumnName("gyro_uncal_y");

                    b.Property<float?>("GyroUncalZ")
                        .HasColumnType("real")
                        .HasColumnName("gyro_uncal_z");

                    b.Property<float?>("GyroX")
                        .HasColumnType("real")
                        .HasColumnName("gyro_x");

                    b.Property<float?>("GyroY")
                        .HasColumnType("real")
                        .HasColumnName("gyro_y");

                    b.Property<float?>("GyroZ")
                        .HasColumnType("real")
                        .HasColumnName("gyro_z");

                    b.Property<float?>("Heading")
                        .HasColumnType("real")
                        .HasColumnName("heading");

                    b.Property<float?>("Humidity")
                        .HasColumnType("real")
                        .HasColumnName("humidity");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synced");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<float?>("Light")
                        .HasColumnType("real")
                        .HasColumnName("light");

                    b.Property<float?>("LinearAccelX")
                        .HasColumnType("real")
                        .HasColumnName("linear_accel_x");

                    b.Property<float?>("LinearAccelY")
                        .HasColumnType("real")
                        .HasColumnName("linear_accel_y");

                    b.Property<float?>("LinearAccelZ")
                        .HasColumnType("real")
                        .HasColumnName("linear_accel_z");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<float?>("MagBiasX")
                        .HasColumnType("real")
                        .HasColumnName("mag_bias_x");

                    b.Property<float?>("MagBiasY")
                        .HasColumnType("real")
                        .HasColumnName("mag_bias_y");

                    b.Property<float?>("MagBiasZ")
                        .HasColumnType("real")
                        .HasColumnName("mag_bias_z");

                    b.Property<float?>("MagUncalX")
                        .HasColumnType("real")
                        .HasColumnName("mag_uncal_x");

                    b.Property<float?>("MagUncalY")
                        .HasColumnType("real")
                        .HasColumnName("mag_uncal_y");

                    b.Property<float?>("MagUncalZ")
                        .HasColumnType("real")
                        .HasColumnName("mag_uncal_z");

                    b.Property<float?>("MagX")
                        .HasColumnType("real")
                        .HasColumnName("mag_x");

                    b.Property<float?>("MagY")
                        .HasColumnType("real")
                        .HasColumnName("mag_y");

                    b.Property<float?>("MagZ")
                        .HasColumnType("real")
                        .HasColumnName("mag_z");

                    b.Property<float?>("Pitch")
                        .HasColumnType("real")
                        .HasColumnName("pitch");

                    b.Property<float?>("Pressure")
                        .HasColumnType("real")
                        .HasColumnName("pressure");

                    b.Property<float?>("Proximity")
                        .HasColumnType("real")
                        .HasColumnName("proximity");

                    b.Property<float?>("Roll")
                        .HasColumnType("real")
                        .HasColumnName("roll");

                    b.Property<float?>("RotationVectorW")
                        .HasColumnType("real")
                        .HasColumnName("rotation_vector_w");

                    b.Property<float?>("RotationVectorX")
                        .HasColumnType("real")
                        .HasColumnName("rotation_vector_x");

                    b.Property<float?>("RotationVectorY")
                        .HasColumnType("real")
                        .HasColumnName("rotation_vector_y");

                    b.Property<float?>("RotationVectorZ")
                        .HasColumnType("real")
                        .HasColumnName("rotation_vector_z");

                    b.Property<string>("SessionId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("session_id");

                    b.Property<float?>("Speed")
                        .HasColumnType("real")
                        .HasColumnName("speed");

                    b.Property<int?>("StepCounter")
                        .HasColumnType("integer")
                        .HasColumnName("step_counter");

                    b.Property<bool?>("StepDetected")
                        .HasColumnType("boolean")
                        .HasColumnName("step_detected");

                    b.Property<float?>("Temperature")
                        .HasColumnType("real")
                        .HasColumnName("temperature");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("user_id");

                    b.Property<float?>("Yaw")
                        .HasColumnType("real")
                        .HasColumnName("yaw");

                    b.HasKey("Id")
                        .HasName("pk_imu_data");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_imu_data_user_id");

                    b.HasIndex("SessionId", "Timestamp")
                        .HasDatabaseName("ix_imu_data_session_id_timestamp");

                    b.ToTable("imu_data", (string)null);
                });

            modelBuilder.Entity("IPSDataAcquisition.Domain.Entities.Session", b =>
                {
                    b.Property<string>("SessionId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("session_id");

                    b.Property<decimal?>("BonusAmount")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("bonus_amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("EndTimestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("end_timestamp");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synced");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("payment_status");

                    b.Property<string>("Remarks")
                        .HasColumnType("text")
                        .HasColumnName("remarks");

                    b.Property<long>("StartTimestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("start_timestamp");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("user_id");

                    b.HasKey("SessionId")
                        .HasName("pk_sessions");

                    b.HasIndex("StartTimestamp")
                        .HasDatabaseName("ix_sessions_start_timestamp");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_sessions_status");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_sessions_user_id");

                    b.ToTable("sessions", (string)null);
                });

            modelBuilder.Entity("IPSDataAcquisition.Domain.Entities.ButtonPress", b =>
                {
                    b.HasOne("IPSDataAcquisition.Domain.Entities.Session", "Session")
                        .WithMany("ButtonPresses")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_button_presses_sessions_session_id");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("IPSDataAcquisition.Domain.Entities.IMUData", b =>
                {
                    b.HasOne("IPSDataAcquisition.Domain.Entities.Session", "Session")
                        .WithMany("IMUDataPoints")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_imu_data_sessions_session_id");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("IPSDataAcquisition.Domain.Entities.Session", b =>
                {
                    b.Navigation("ButtonPresses");

                    b.Navigation("IMUDataPoints");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using IPSDataAcquisition.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IPSDataAcquisition.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251021085204_AddRefreshTokens")]
    partial class AddRefreshTokens
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IPSDataAcquisition.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_users_phone_number");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("IPSDataAcquisition.Domain.Entities.Bonus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("SessionsCompleted")
                        .HasColumnType("integer")
                        .HasColumnName("sessions_completed");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_bonuses");

                    b.HasIndex("Date")
                        .HasDatabaseName("ix_bonuses_date");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_bonuses_user_id");

                    b.HasIndex("UserId", "Date")
                        .IsUnique()
                        .HasDatabaseName("ix_bonuses_user_id_date");

                    b.ToTable("bonuses", (string)null);
                });

            modelBuilder.Entity("IPSDataAcquisition.Domain.Entities.ButtonPress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("action");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("FloorIndex")
                        .HasColumnType("integer")
                        .HasColumnName("floor_index");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synced");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("session_id");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_button_presses");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_button_presses_session_id");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("ix_button_presses_timestamp");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_button_presses_user_id");

                    b.ToTable("button_presses", (string)null);
                });

            modelBuilder.Entity("IPSDataAcquisition.Domain.Entities.IMUData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float?>("AccelBiasX")
                        .HasColumnType("real")
                        .HasColumnName("accel_bias_x");

                    b.Property<float?>("AccelBiasY")
                        .HasColumnType("real")
                        .HasColumnName("accel_bias_y");

                    b.Property<float?>("AccelBiasZ")
                        .HasColumnType("real")
                        .HasColumnName("accel_bias_z");

                    b.Property<float?>("AccelUncalX")
                        .HasColumnType("real")
                        .HasColumnName("accel_uncal_x");

                    b.Property<float?>("AccelUncalY")
                        .HasColumnType("real")
                        .HasColumnName("accel_uncal_y");

                    b.Property<float?>("AccelUncalZ")
                        .HasColumnType("real")
                        .HasColumnName("accel_uncal_z");

                    b.Property<float?>("AccelX")
                        .HasColumnType("real")
                        .HasColumnName("accel_x");

                    b.Property<float?>("AccelY")
                        .HasColumnType("real")
                        .HasColumnName("accel_y");

                    b.Property<float?>("AccelZ")
                        .HasColumnType("real")
                        .HasColumnName("accel_z");

                    b.Property<double?>("Altitude")
                        .HasColumnType("double precision")
                        .HasColumnName("altitude");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<float?>("GameRotationW")
                        .HasColumnType("real")
                        .HasColumnName("game_rotation_w");

                    b.Property<float?>("GameRotationX")
                        .HasColumnType("real")
                        .HasColumnName("game_rotation_x");

                    b.Property<float?>("GameRotationY")
                        .HasColumnType("real")
                        .HasColumnName("game_rotation_y");

                    b.Property<float?>("GameRotationZ")
                        .HasColumnType("real")
                        .HasColumnName("game_rotation_z");

                    b.Property<float?>("GeomagRotationW")
                        .HasColumnType("real")
                        .HasColumnName("geomag_rotation_w");

                    b.Property<float?>("GeomagRotationX")
                        .HasColumnType("real")
                        .HasColumnName("geomag_rotation_x");

                    b.Property<float?>("GeomagRotationY")
                        .HasColumnType("real")
                        .HasColumnName("geomag_rotation_y");

                    b.Property<float?>("GeomagRotationZ")
                        .HasColumnType("real")
                        .HasColumnName("geomag_rotation_z");

                    b.Property<float?>("GpsAccuracy")
                        .HasColumnType("real")
                        .HasColumnName("gps_accuracy");

                    b.Property<float?>("GravityX")
                        .HasColumnType("real")
                        .HasColumnName("gravity_x");

                    b.Property<float?>("GravityY")
                        .HasColumnType("real")
                        .HasColumnName("gravity_y");

                    b.Property<float?>("GravityZ")
                        .HasColumnType("real")
                        .HasColumnName("gravity_z");

                    b.Property<float?>("GyroDriftX")
                        .HasColumnType("real")
                        .HasColumnName("gyro_drift_x");

                    b.Property<float?>("GyroDriftY")
                        .HasColumnType("real")
                        .HasColumnName("gyro_drift_y");

                    b.Property<float?>("GyroDriftZ")
                        .HasColumnType("real")
                        .HasColumnName("gyro_drift_z");

                    b.Property<float?>("GyroUncalX")
                        .HasColumnType("real")
                        .HasColumnName("gyro_uncal_x");

                    b.Property<float?>("GyroUncalY")
                        .HasColumnType("real")
                        .HasColumnName("gyro_uncal_y");

                    b.Property<float?>("GyroUncalZ")
                        .HasColumnType("real")
                        .HasColumnName("gyro_uncal_z");

                    b.Property<float?>("GyroX")
                        .HasColumnType("real")
                        .HasColumnName("gyro_x");

                    b.Property<float?>("GyroY")
                        .HasColumnType("real")
                        .HasColumnName("gyro_y");

                    b.Property<float?>("GyroZ")
                        .HasColumnType("real")
                        .HasColumnName("gyro_z");

                    b.Property<float?>("Heading")
                        .HasColumnType("real")
                        .HasColumnName("heading");

                    b.Property<float?>("Humidity")
                        .HasColumnType("real")
                        .HasColumnName("humidity");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synced");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<float?>("Light")
                        .HasColumnType("real")
                        .HasColumnName("light");

                    b.Property<float?>("LinearAccelX")
                        .HasColumnType("real")
                        .HasColumnName("linear_accel_x");

                    b.Property<float?>("LinearAccelY")
                        .HasColumnType("real")
                        .HasColumnName("linear_accel_y");

                    b.Property<float?>("LinearAccelZ")
                        .HasColumnType("real")
                        .HasColumnName("linear_accel_z");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<float?>("MagBiasX")
                        .HasColumnType("real")
                        .HasColumnName("mag_bias_x");

                    b.Property<float?>("MagBiasY")
                        .HasColumnType("real")
                        .HasColumnName("mag_bias_y");

                    b.Property<float?>("MagBiasZ")
                        .HasColumnType("real")
                        .HasColumnName("mag_bias_z");

                    b.Property<float?>("MagUncalX")
                        .HasColumnType("real")
                        .HasColumnName("mag_uncal_x");

                    b.Property<float?>("MagUncalY")
                        .HasColumnType("real")
                        .HasColumnName("mag_uncal_y");

                    b.Property<float?>("MagUncalZ")
                        .HasColumnType("real")
                        .HasColumnName("mag_uncal_z");

                    b.Property<float?>("MagX")
                        .HasColumnType("real")
                        .HasColumnName("mag_x");

                    b.Property<float?>("MagY")
                        .HasColumnType("real")
                        .HasColumnName("mag_y");

                    b.Property<float?>("MagZ")
                        .HasColumnType("real")
                        .HasColumnName("mag_z");

                    b.Property<float?>("Pitch")
                        .HasColumnType("real")
                        .HasColumnName("pitch");

                    b.Property<float?>("Pressure")
                        .HasColumnType("real")
                        .HasColumnName("pressure");

                    b.Property<float?>("Proximity")
                        .HasColumnType("real")
                        .HasColumnName("proximity");

                    b.Property<float?>("Roll")
                        .HasColumnType("real")
                        .HasColumnName("roll");

                    b.Property<float?>("RotationVectorW")
                        .HasColumnType("real")
                        .HasColumnName("rotation_vector_w");

                    b.Property<float?>("RotationVectorX")
                        .HasColumnType("real")
                        .HasColumnName("rotation_vector_x");

                    b.Property<float?>("RotationVectorY")
                        .HasColumnType("real")
                        .HasColumnName("rotation_vector_y");

                    b.Property<float?>("RotationVectorZ")
                        .HasColumnType("real")
                        .HasColumnName("rotation_vector_z");

                    b.Property<string>("SessionId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("session_id");

                    b.Property<float?>("Speed")
                        .HasColumnType("real")
                        .HasColumnName("speed");

                    b.Property<int?>("StepCounter")
                        .HasColumnType("integer")
                        .HasColumnName("step_counter");

                    b.Property<bool?>("StepDetected")
                        .HasColumnType("boolean")
                        .HasColumnName("step_detected");

                    b.Property<float?>("Temperature")
                        .HasColumnType("real")
                        .HasColumnName("temperature");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.Property<long?>("TimestampNanos")
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp_nanos");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("user_id");

                    b.Property<float?>("Yaw")
                        .HasColumnType("real")
                        .HasColumnName("yaw");

                    b.HasKey("Id")
                        .HasName("pk_imu_data");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_imu_data_user_id");

                    b.HasIndex("SessionId", "Timestamp")
                        .HasDatabaseName("ix_imu_data_session_id_timestamp");

                    b.ToTable("imu_data", (string)null);
                });

            modelBuilder.Entity("IPSDataAcquisition.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_revoked");

                    b.Property<string>("ReplacedByToken")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("replaced_by_token");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_at");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("token");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("ix_refresh_tokens_expires_at");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("ix_refresh_tokens_token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("IPSDataAcquisition.Domain.Entities.Session", b =>
                {
                    b.Property<string>("SessionId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("session_id");

                    b.Property<decimal?>("BonusAmount")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("bonus_amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("EndTimestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("end_timestamp");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synced");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("payment_status");

                    b.Property<string>("Remarks")
                        .HasColumnType("text")
                        .HasColumnName("remarks");

                    b.Property<long>("StartTimestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("start_timestamp");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("user_id");

                    b.HasKey("SessionId")
                        .HasName("pk_sessions");

                    b.HasIndex("StartTimestamp")
                        .HasDatabaseName("ix_sessions_start_timestamp");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_sessions_status");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_sessions_user_id");

                    b.ToTable("sessions", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IPSDataAcquisition.Domain.Entities.ButtonPress", b =>
                {
                    b.HasOne("IPSDataAcquisition.Domain.Entities.Session", "Session")
                        .WithMany("ButtonPresses")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_button_presses_sessions_session_id");

                    b.HasOne("IPSDataAcquisition.Domain.Entities.ApplicationUser", null)
                        .WithMany("ButtonPresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_button_presses_users_user_id");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("IPSDataAcquisition.Domain.Entities.IMUData", b =>
                {
                    b.HasOne("IPSDataAcquisition.Domain.Entities.Session", "Session")
                        .WithMany("IMUDataPoints")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_imu_data_sessions_session_id");

                    b.HasOne("IPSDataAcquisition.Domain.Entities.ApplicationUser", null)
                        .WithMany("IMUDataRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_imu_data_users_user_id");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("IPSDataAcquisition.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("IPSDataAcquisition.Domain.Entities.ApplicationUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IPSDataAcquisition.Domain.Entities.Session", b =>
                {
                    b.HasOne("IPSDataAcquisition.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_sessions_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IPSDataAcquisition.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IPSDataAcquisition.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("IPSDataAcquisition.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IPSDataAcquisition.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("IPSDataAcquisition.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("ButtonPresses");

                    b.Navigation("IMUDataRecords");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("IPSDataAcquisition.Domain.Entities.Session", b =>
                {
                    b.Navigation("ButtonPresses");

                    b.Navigation("IMUDataPoints");
                });
#pragma warning restore 612, 618
        }
    }
}
